apiVersion: build.knative.dev/v1alpha1
kind: BuildTemplate
metadata:
  name: gotool
spec:
  parameters:
  - name: ORGANIZATION
  - name: REPOSITORY
  - name: BRANCH
    default: master
  - name: ASSIGNEE
    default: mattmoor
  - name: TOKEN
    default: ""

  steps:
  - name: gofmt
    image: golang
    command: ["/bin/bash", "-c"]
    args: ["gofmt -s -w $(find -path './vendor' -prune -o -type f -name '*.go' -print)"]

  - name: goimports
    image: github.com/mattmoor/knobots/vendor/golang.org/x/tools/cmd/goimports
    command: ["/bin/bash", "-c"]
    args:
    - |
      set -e
      set -x
      export PARENT_DIR=${GOPATH}/src/github.com/${ORGANIZATION}
      if [ "${REPOSITORY}" == "pkg" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == "sample-controller" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == "test-infra" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == serving ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == eventing ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == eventing-contrib ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == "caching" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      fi
      mkdir -p ${PARENT_DIR}
      ln -s /workspace ${PARENT_DIR}/${REPOSITORY}
      cd ${PARENT_DIR}/${REPOSITORY}
      /ko-app/goimports -w $(find -name '*.go' | grep -v vendor)
    env:
    - name: GOPATH
      value: /tmp/go

  - name: open-pull-request
    image: github.com/mattmoor/knobots/cmd/pr-builder
    args:
    - "-organization=${ORGANIZATION}"
    - "-repository=${REPOSITORY}"
    - "-title=golang format tools"
    - "-branch=${BRANCH}"
    - "-token=${TOKEN}"
    - "-body"
    - |
        Produced via:
          `gofmt -s -w $(find -path './vendor' -prune -o -type f -name '*.go' -print))`
          `goimports -w $(find -name '*.go' | grep -v vendor)`
        /assign ${ASSIGNEE}
    env:
    # Inject the generated pod name so that we can use it as a
    # pseudo-random branch name (and associate open PRs with
    # build logs).
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name

    # This mimics the runtime contract of the GithubBinding
    volumeMounts:
    - name: github-binding
      mountPath: /var/bindings/github

  volumes:
  - name: github-binding
    secret:
      secretName: github-comment-secret

apiVersion: build.knative.dev/v1alpha1
kind: BuildTemplate
metadata:
  name: dep-update
spec:
  parameters:
  - name: ORGANIZATION
  - name: REPOSITORY
  - name: DEPENDENCIES
  - name: ASSIGNEE
    default: mattmoor

  steps:
  - name: dep
    image: gcr.io/convoy-adapter/dep
    command: ["/bin/bash", "-c"]
    args:
    - |
      set -e
      set -x
      export PARENT_DIR=${GOPATH}/src/github.com/${ORGANIZATION}
      if [ "${REPOSITORY}" == "pkg" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == "sample-controller" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "${REPOSITORY}" == "caching" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      fi
      mkdir -p ${PARENT_DIR}
      ln -s /workspace ${PARENT_DIR}/${REPOSITORY}
      cd ${PARENT_DIR}/${REPOSITORY}
      export REPO_ROOT_DIR=${PARENT_DIR}/${REPOSITORY}
      dep ensure -update ${DEPENDENCIES}
      go get -u github.com/google/licenseclassifier
      go get -u github.com/knative/test-infra/tools/dep-collector
      export PATH=${PATH}:${GOPATH}/bin
      # Sometimes we "fix up" ./vendor, so run this for good measure.
      ./hack/update-deps.sh
      # We may pull in code-generator updates.
      ./hack/update-codegen.sh
    env:
    - name: GOPATH
      value: /tmp/go

  - name: open-pull-request
    image: github.com/mattmoor/knobots/cmd/pr-builder
    args:
    - "-organization=${ORGANIZATION}"
    - "-repository=${REPOSITORY}"
    - "-title=Auto-update dependencies"
    - "-body"
    - |
        Produced via:
          `dep ensure -update ${DEPENDENCIES}`
        /assign @${ASSIGNEE}
    env:
    - name: GITHUB_ACCESS_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-comment-secret
          key: accessToken
    - name: GITHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: github-comment-secret
          key: username
    # Inject the generated pod name so that we can use it as a
    # pseudo-random branch name (and associate open PRs with
    # build logs).
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
